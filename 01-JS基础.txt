1.简单数据类型
  number, string, boolean, undefined, null
2.number转换类型：
  parsetInt()遇到非数字即停止；parseFloat()遇到第一个小数点会解析，直到第二个停止	
3.string转换类型
  tostring()一般常用，string()undifined和null没有tostring()方法		
4.运算符的优先级
  [（）] ===>  [一元运算符++,--]  ===>  [算数运算符+-*/%]  ===> [关系运算符>,<,>=,<=]  ===>
     [相等运算符== === != !==]  ===>  [逻辑运算符，先&&后||]  ===>  赋值运算符
5.while语句   ： 当循环条件为true时，执行循环体
  while(循环条件){循环体}
6.do..while语句
  do{无论条件符合都执行}while(循环条件）
7.break和continue区别
  break是立即跳出循环（结束循环）；continue是结束本次循环，继续执行下次循环
8.arguments:
  所有函数都有一个arguments内置对象，里面存储了传递的所有实参，是一个伪数组，可遍历循环。
9.函数命名规范：
  见名知意，变量名称一般用名词，函数名称一般用动词；前后要有空格；
10.变量退出作用域会销毁，全局变量关闭网页或浏览器才会销毁；
11.预解析：
  变量的声明头会提升到最前面，不会提升赋值；函数的声明提升到当前作用域的最前面，不会提升调用。
  先提升var后提升function.
12.简单数据类型：即基本数据类型，在存储时，变量中存储的是值本身，因此叫值类型；
   复杂数据类型：在存储时，变量中存储的仅仅是地址（引用），因此叫引用数据类型。
13.栈：基本类型值直接存储在栈内存中。
   堆：复杂数据类型在栈中存储一个地址，这个地址指向堆内存。
14.Array对象
   instanceof():检测一个对象是否是数组；Array.isArray() H5中提供的方法，有兼容性。
   toString():把数组转换成字符串，逗号分隔每一项；ValueOf():返回数组对象本身。
   indexof():返回指定内容在元字符串中的位置；
15.数组常用方法
   push():向数组的末尾添加一个或者多个元素，并返回新数组；
   shift():删除数组中的第一个元素，并返回；
   pop():删除数组的最后一个元素，并返回删除的元素。
   unshift():向数组的最前面插入项，并返回新数组长度。
   reverse():翻转数组；
   sort():对数组的元素进行排序；
   splice():从数组中添加或删除元素；
   slice():从当前数组中截取一个新数组；
   concat():连接两个或多个数组；
   join(): 把数组中项目用（参数）分隔并返回字符串；
16.字符串的不可变性：
   当重新给字符串赋值时候，常量abc不会被修改，依然在内存中；会在内存中新开辟空间，这个特点就是字符串的不可变。
   由于字符串的不可变，在大量拼接字符串的时候会有效率问题；
------------------------------------------------------------------------------------------------
// 1 字符方法
charAt()    	//获取指定位置处字符
charCodeAt()  	//获取指定位置处字符的ASCII码
str[0]   		//HTML5，IE8+支持 和charAt()等效
// 2 字符串操作方法
concat()   		//拼接字符串，等效于+，+更常用
slice()    		//从start位置开始，截取到end位置，end取不到
substring() 	//从start位置开始，截取到end位置，end取不到
substr()   		//从start位置开始，截取length个字符
// 3 位置方法
indexOf()   	//返回指定内容在元字符串中的位置
lastIndexOf() 	//从后往前找，只找第一个匹配的
// 4 去除空白   
trim()  		//只能去除字符串前后的空白
// 5 大小写转换方法
to(Locale)UpperCase() 	//转换大写
to(Locale)LowerCase() 	//转换小写
// 6 其它
search()
replace()
split()
fromCharCode()
// String.fromCharCode(101, 102, 103);	 //把ASCII码转换成字符串
   
   

  

